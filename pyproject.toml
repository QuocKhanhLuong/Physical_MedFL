[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "flower-federated-learning-physical-medical-segmentation"
version = "0.1.0"
authors = [
  { name="Your Name", email="you@example.com" },
]
description = "A Flower federated learning example with RobustMedVFL_UNet."
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License", 
    "Operating System :: OS Independent",
]
dependencies = [
    "flwr[simulation]==1.18.0",  # Cập nhật lên 1.18.0
    "torch",
    "torchvision",
    "scikit-image",
    "scikit-learn",
    "numpy",
    "h5py",
    "nibabel",
    "opencv-python",
    "pyyaml",
    "matplotlib",
    "seaborn",
    "tqdm",
    "pandas",
    "toml",  # Added for config parsing
    "psutil"  # Added for process detection
]


# Add to pyproject.toml
[tool.flower.federations.default]
num_supernodes = 3
num_rounds = 100

[tool.flower.client_app.config]
local_epochs = 10
batch_size = 4
learning_rate = 1e-4
momentum = 0.9
weight_decay = 1e-5
gradient_clipping = 1.0

[tool.flower.client_app.data]
samples_per_client = 30
data_split = "iid"
augmentation = true

[tool.hatch.build.targets.wheel]
# Include all .py files from the project root in the wheel.
# This tells Hatch where to find your application code.
packages = ["."] 

[tool.flwr.app]
publisher = "flower-federated-learning-medical"

# For running with `flower-simulation` (which is often easier for development)
# you define the clientapp and serverapp that the simulation engine will use.
[tool.flwr.app.components]
clientapp = "src.fl_core.app_client:app"
serverapp = "src.fl_core.app_server:app"

[tool.flwr.federations]
default = "research"

[tool.flwr.federations.research]
options.num-supernodes = 1

[tool.flwr.federations.scalable]
options.num-supernodes = 5

[tool.flwr.federations.production]
options.num-supernodes = 50
